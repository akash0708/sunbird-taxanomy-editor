export interface SimulateApiResponse {
  url: string;
  method: string;
  data?: unknown;
  status: number;
}

export async function simulateApiCall(
  url: string,
  method: string,
  data?: unknown
): Promise<SimulateApiResponse> {
  return new Promise((resolve) => {
    setTimeout(() => {
      resolve({ url, method, data, status: 200 });
    }, 600);
  });
}

// Formats a date (string or Date object) into a readable string like "Jan 01, 2024".
export function formatDate(date: Date | string) {
  const d = new Date(date);
  const months = [
    'Jan',
    'Feb',
    'Mar',
    'Apr',
    'May',
    'Jun',
    'Jul',
    'Aug',
    'Sep',
    'Oct',
    'Nov',
    'Dec',
  ];
  const month = months[d.getMonth()];
  const day = String(d.getDate()).padStart(2, '0');
  const year = d.getFullYear();
  return `${month} ${day}, ${year}`;
}

// Converts a string to camelCase, removing non-alphanumeric separators and capitalizing the following letter.
export function camelCaseCode(input: string): string {
  // Remove all non-alphanumeric separators and capitalize the following letter
  const camel = input
    .replace(/[-_\s]+(.)?/g, (_match, chr) => (chr ? chr.toUpperCase() : ''))
    .replace(/^[A-Z]/, (match) => match.toLowerCase());
  return camel;
}

// Returns a copy of the given object with the name updated and the code (or custom code field) auto-generated in camelCase from the name.
export function autoFillCodeFromName<T extends { name: string; code: string }>(
  obj: T,
  name: string,
  codeField?: 'code' | string
): T {
  const codeKey = codeField || 'code';
  return {
    ...obj,
    name,
    [codeKey]: camelCaseCode(name),
  };
}

// Returns the name as the description (currently a pass-through, but can be extended).
export function autoGenerateDescriptionFromName(name: string): string {
  return name;
}
