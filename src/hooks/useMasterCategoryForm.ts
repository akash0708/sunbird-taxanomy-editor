import { useState, useEffect, useCallback } from 'react';
import {
  fetchMasterCategories,
  createMasterCategory,
  generateMasterCategoryFields,
} from '@/services/masterCategoryService';
import {
  autoFillCodeFromName,
  autoGenerateDescriptionFromName,
} from '@/utils/HelperService';
import { MasterCategory } from '@/interfaces/MasterCategoryInterface';

const initialFormState = {
  name: '',
  code: '',
  description: '',
  targetIdFieldName: '',
  searchLabelFieldName: '',
  searchIdFieldName: '',
  orgIdFieldName: '',
};

export function useMasterCategoryForm() {
  const [form, setForm] = useState({ ...initialFormState });
  const [descriptionManuallyChanged, setDescriptionManuallyChanged] =
    useState(false);
  const [formLoading, setFormLoading] = useState(false);
  const [formError, setFormError] = useState<string | null>(null);
  const [formSuccess, setFormSuccess] = useState<string | null>(null);
  const [categories, setCategories] = useState<MasterCategory[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    setLoading(true);
    setError(null);
    fetchMasterCategories()
      .then(setCategories)
      .catch((err) =>
        setError(err.message || 'Failed to fetch master categories')
      )
      .finally(() => setLoading(false));
  }, []);

  const handleFormChange = useCallback(
    (e: React.ChangeEvent<HTMLInputElement>) => {
      const { name, value } = e.target;
      if (name === 'name') {
        setForm((prev) => {
          const updated = autoFillCodeFromName(prev, value);
          if (!updated.code) {
            return {
              ...updated,
              targetIdFieldName: '',
              searchLabelFieldName: '',
              searchIdFieldName: '',
              orgIdFieldName: '',
              description: descriptionManuallyChanged
                ? prev.description
                : autoGenerateDescriptionFromName(value),
            };
          }
          return {
            ...updated,
            ...generateMasterCategoryFields(updated.code),
            description: descriptionManuallyChanged
              ? prev.description
              : autoGenerateDescriptionFromName(value),
          };
        });
      } else if (name === 'code') {
        setForm((prev) => {
          const updated = { ...prev, code: value };
          if (!updated.code) {
            return {
              ...updated,
              targetIdFieldName: '',
              searchLabelFieldName: '',
              searchIdFieldName: '',
              orgIdFieldName: '',
            };
          }
          return {
            ...updated,
            ...generateMasterCategoryFields(updated.code),
          };
        });
      } else if (name === 'description') {
        setDescriptionManuallyChanged(true);
        setForm((prev) => ({ ...prev, description: value }));
      } else {
        setForm((prev) => ({ ...prev, [name]: value }));
      }
    },
    [descriptionManuallyChanged]
  );

  const handleFormSubmit = useCallback(
    async (e: React.FormEvent) => {
      e.preventDefault();
      setFormError(null);
      setFormSuccess(null);
      setFormLoading(true);
      try {
        await createMasterCategory(form);
        setFormSuccess('Master category created successfully!');
        setForm({ ...initialFormState });
        setDescriptionManuallyChanged(false);
        setLoading(true);
        setCategories(await fetchMasterCategories());
      } catch (err: unknown) {
        setFormError(
          err instanceof Error
            ? err.message
            : 'Failed to create master category'
        );
      } finally {
        setFormLoading(false);
        setLoading(false);
      }
    },
    [form]
  );

  return {
    form,
    handleFormChange,
    handleFormSubmit,
    formLoading,
    formError,
    formSuccess,
    categories,
    loading,
    error,
  };
}
